from flask.ext.sqlalchemy import SQLAlchemy
from werkzeug import generate_password_hash, check_password_hash

db = SQLAlchemy()


class User(db.Model):
    __tablename__ = 'users'
    uid = db.Column(db.Integer, primary_key=True)
    firstname = db.Column(db.String(100))
    lastname = db.Column(db.String(100))
    email = db.Column(db.String(120), unique=True)
    pwdhash = db.Column(db.String(54))

    def __init__(self, firstname, lastname, email, password):
        self.firstname = firstname.title()
        self.lastname = lastname.title()
        self.email = email.lower()
        self.set_password(password)

    def set_password(self, password):
        self.pwdhash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.pwdhash, password)

    # login friendly methods - https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins
    @property
    def is_authenticated(self):
        # should just return True unless the object represents a user that should not be allowed to authenticate for
        # some reason.
        return True

    @property
    def is_active(self):
        #  should return True for users unless they are inactive, for example because they have been banned
        return True

    @property
    def is_anonymous(self):
        # should return True only for fake users that are not supposed to log in to the system
        return False

    def get_id(self):
        # return a unique identifier for the user, in unicode format
        # use the unique id generated by the database layer for this
        return str(self.uid)

    def __repr__(self):
        return '<User %r %r>' % (self.firstname, self.lastname)
